EVAL_OBJS_OPT = $(BASE_OBJS_OPT) ../utils/treeCostApprox.ml
fort.cmx: poyExtension.cmo fort.ml
	$(OCAMLOPT) $(OPTIONSPREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(CCOPT) -c fort.ml

portal: $(BASE_OBJS_OPT) compileFlags.cmx phylo.cmx fort.cmx
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) -verbose -ccopt -v -cclib -L./grappa \
	-cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(PROFILE) -o $@ \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa \
	bigarray.cmxa $^ $(LIBS) 

inversions: grappa/grappa.cmxa compileFlags.cmx sadmanOutput.cmx utlGrappa.cmx graphps/graphps.cmx ../utils/inversions.ml
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) -verbose -ccopt -v -cclib -L./grappa \
	-cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(PROFILE) -o $@ \
	$(GRAPHICS:.cma=.cmxa) str.cmxa \
	unix.cmxa $^ $(LIBS) 


lower_bound: $(BASE_OBJS_OPT) ../utils/lowerBound.ml
	ocamlfind ocamlopt -package glpk -linkpkg $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) -verbose -ccopt -v -cclib -L./grappa \
	-cclib -L/opt/local/lib -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(PROFILE) -o $@ \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa \
	bigarray.cmxa $^ $(LIBS) 

evaluating_do: $(EVAL_OBJS_OPT)
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) -o evaluating_do \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa $^

evaluate_mem: $(BASE_OBJS_OPT) ../utils/test_memory_reading_trees.ml
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) -o evaluate_mem \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa $^

threeDimensionalApproximation: $(BASE_OBJS_OPT) ../utils/threeDimensionalApproximation.ml
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) \
	-o threeDimensionalApproximation $(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa \
	unix.cmxa str.cmxa bigarray.cmxa $^

triplets: $(BASE_OBJS_OPT) ../utils/triplets.ml
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L$(OCAMLMPI) mpi.cmxa -cclib -L./grappa -cclib  -L/usr/lib -cclib \
	-L./graphps -cclib -L./ $(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) \
	-o triplets $(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa \
	unix.cmxa str.cmxa bigarray.cmxa $^

samplePairwiseDistance: $(BASE_OBJS_OPT) ../utils/samplePairwiseDistance.ml
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) -o samplePairwiseDistance \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa $^

randomTree: ../utils/randomTree.ml 
	$(OCAMLOPT) -o randomTree $^


splitFasta: $(BASE_OBJS_OPT) ../utils/splitFasta.ml 
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) -o splitFasta \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa nums.cmxa $^

randomFasta: $(BASE_OBJS_OPT) ../utils/randomFasta.ml 
	$(OCAMLOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) -o randomFasta \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa nums.cmxa $^

annealingEvaluation: ../utils/annealing_evaluation.ml
	$(OCAMLOPT) -o annealingEvaluation $(CCOPT) $^

costFlip: $(BASE_OBJS_OPT) ../utils/costFlip.ml
ifeq ($(USEPARALLEL), true)
	$(OCAMLOPT) $(OPTIONSPREPROCESSOR) $(OCAML_INCLUDES) $(CCOPT) -c ../utils/costFlip.ml
	$(OCAMLOPT) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  -cclib -L$(OCAMLMPI) -cclib -l$(MPILNAME) \
	$(CCOPT) -cclib -lcamlgrappa mpi.cmxa $(NCURSES_LIBRARIES) $(PROFILE) -o costFlip \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa nums.cmxa \
	$(BASE_OBJS_OPT) ../utils/costFlip.cmx
else
	$(OCAMLOPT) $(OPTIONSPREPROCESSOR) $(OCAML_INCLUDES) $(CCOPT) -c ../utils/costFlip.ml
	$(OCAMLOPT) $(OCAML_INCLUDES) -verbose -ccopt -v -cclib \
	-L./grappa -cclib  -L/usr/lib -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lcamlgrappa $(NCURSES_LIBRARIES) $(PROFILE) -o costFlip \
	$(GRAPHICS:.cma=.cmxa) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa nums.cmxa \
	$(BASE_OBJS_OPT) ../utils/costFlip.cmx
endif

clean::
	rm -f randomTree
