# $Id: Makefile 1929 2007-06-26 23:34:34Z andres $

# Instructions:
# You can compile a debug bytecode app by specifying DEBUG=-g
# You can compile a profiled bytecode app by specifying
#      OCAMLC=ocamlcp DEBUG="-p a"
# You can compile a profiled native app by specifying PROFILE=-p

# Change whatever options (compilers, compiler options, and so on) in this file
# Cleanup spaces so that we recognize proper options

all: clean poy

SHELL = /bin/sh
VPATH = @srcdir@

subdirs = @subdirs@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
infodir = $(prefix)/info
libdir = $(prefix)/lib/gnudl
mandir = $(prefix)/man/man1

CC = @CC@
CPPFLAGS = @CPPFLAGS@
CFLAGS = $(CPPFLAGS) @CFLAGS@ 
LDFLAGS = @LDFLAGS@
LIBS = -cclib "-lz @LIBS@"
INSTALL = @INSTALL@

USEPARALLEL := @USEPARALLEL@
USE_LARGE_MESSAGES := @USE_LARGE_MESSAGES@
USEWIN32 := @USEWIN32@
USE_LONG_SEQUENCES := @USE_LONG_SEQUENCES@
USE_LARGE_ALPHABETS := @USE_LARGE_ALPHABETS@
USEINTERFACE := @USEINTERFACE@
USEGRAPHICS := @USEGRAPHICS@
USESHAREDHD := @USESHAREDHD@
USE_XSLT := @USE_XSLT@
USE_VERIFY_COSTS := @USE_VERIFY_COSTS@
OCAML := @OCAML@
OCAMLC := @OCAMLC@
OCAMLOPT := @OCAMLOPT@ 
OCAMLDEP := @OCAMLDEP@ -slash
OCAMLTOP := @OCAMLTOP@
OCAMLLEX := @OCAMLLEX@
OCAMLYACC := @OCAMLYACC@
MERCURIAL :=@MERCURIAL@
EXTRAS := @EXTRAS@
OFLAGS := @OCAMLFLAGS@ 
NATIVEDYNLINK := @NATIVEDYNLINK@

INCLUDE = `$(OCAMLC) -where`

CCOPT := -cc $(CC) -cclib "-L./gz-0.5.7 -lmlgz" -ccopt "$(CFLAGS)" -ccopt "-I $(INCLUDE)"

CAMLPDFSOURCES=$(addprefix ./camlpdf-0.3/, utility.ml utility.mli io.ml io.mli \
	  zlib.ml zlib.mli \
	  transform.ml transform.mli \
	  units.ml units.mli \
	  paper.ml paper.mli \
	  pdf.ml pdf.mli \
	  pdfcrypt.ml pdfcrypt.mli \
	  pdfwrite.ml pdfwrite.mli \
	  pdfcodec.ml pdfcodec.mli \
	  pdfread.ml pdfread.mli \
	  pdfpages.ml pdfpages.mli \
	  pdfdoc.ml pdfdoc.mli \
	  pdffun.ml pdffun.mli \
	  pdfimage.ml pdfimage.mli \
	  glyphlist.ml glyphlist.mli \
	  pdftext.ml pdftext.mli \
      fonttables.ml fonttables.mli \
	  graphicpdf.ml)

CAMLPDFOBJ=$(subst .ml,.cmo,$(filter-out %.mli,$(CAMLPDFSOURCES)))

OCAMLMPI = ../ocamlmpi/
OCAML_INCLUDES := -I $(OCAMLMPI) -I +camlp4 -I ./gz-0.5.7 -I ./grappa -I ./camlpdf-0.3 -I ./graphps $(LABLTK)

ifeq ($(USEWIN32), true)
	CCOPT := -ccopt -mno-cygwin $(CCOPT)
endif

DEFOPTS :=
ifeq ($(NATIVEDYNLINK), dynlink.cmxa)
	DEFOPTS := -DUSE_NATIVEDYNLINK $(DEFOPTS)
endif

XSLT_COMPONENTS :=
ifeq ($(USE_XSLT), true)
	XSLT_COMPONENTS := mlxslt.o xslt.cmo
	DEFOPTS := -DUSE_XSLT $(DEFOPTS)
endif

INTERFACE:=statusCommon.cmo status.cmo

READLINE:=
ifeq ($(USEINTERFACE), readline)
	INTERFACE := readlineml.o $(INTERFACE)
	DEFOPTS := $(DEFOPTS) -DUSEREADLINE
	CCOPT := $(CCOPT) -cclib -lreadline
endif
ifeq ($(USEINTERFACE), ncurses)
	INTERFACE := ncurses.o dequeue.cmo ncursesML.cmo $(INTERFACE)
	DEFOPTS := $(DEFOPTS) -DUSENCURSES
	CCOPT := $(CCOPT) -cclib -lncurses
endif
ifeq ($(USEINTERFACE), gtk2)
	GRAPHICS := lablgtk.cma
	OCAML_INCLUDES := -I +lablgtk2 $(OCAML_INCLUDES)
endif
ifeq ($(USEINTERFACE), cocoa)
	CCOPT := -ccopt "-framework Cocoa" $(CCOPT)
endif


ifeq ($(USEGRAPHICS), tk)
     GRAPHICS := labltk.cma $(GRAPHICS)
else
ifeq ($(USEGRAPHICS), ocaml)
     GRAPHICS := graphics.cma $(GRAPHICS)
endif
endif

ifeq ($(USEGRAPHICS), tk)
	LABLTK = -I +labltk
else
	LABLTK =
endif

CAMLP4ORF=@CAMLP4ORF@
PREPROCESSOR = -pp '$(CAMLP4ORF) pa_extend.cmo'
PREPROCESSOR_EXTENSION = -pp '$(CAMLP4ORF) pa_extend.cmo poyExtension.cmo'


# Encapsulate all the options
ifeq ($(USEPARALLEL), true)
	DEFOPTS := $(DEFOPTS) -DUSEPARALLEL
ifeq ($(USENOSHAREDHD), true)
	DEFOPTS := $(DEFOPTS) -DUSENOSHAREDHD
endif
endif

ifeq ($(USE_LARGE_MESSAGES), true)
	DEFOPTS := $(DEFOPTS) -DUSE_LARGE_MESSAGES
endif

ifeq ($(USE_LONG_SEQUENCES), true)
	DEFOPTS := $(DEFOPTS) -DUSE_LONG_SEQUENCES
endif

ifeq ($(USE_LARGE_ALPHABETS), true)
	DEFOPTS := $(DEFOPTS) -DUSE_LARGE_ALPHABETS
endif

ifeq ($(USE_VERIFY_COSTS), true)
	DEFOPTS := $(DEFOPTS) -DUSE_VERIFY_COSTS
endif

ifeq ($(USEGRAPHICS), tk)
    DEFOPTS := $(DEFOPTS) -DUSEGRAPHICS=2
endif

ifeq ($(USEGRAPHICS), ocaml)
	DEFOPTS := $(DEFOPTS) -DUSEGRAPHICS=1
endif


ifeq ($(USEWIN32), true)
	DEFOPTS := $(DEFOPTS) -DUSEWIN32
endif

OPTIONSPREPROCESSOR := -pp '$(CAMLP4ORF) poyExtension.cmo $(DEFOPTS)'


SUBDIRS = grappa graphps gz-0.5.7

gz-0.5.7/gz.cmxa:
	$(MAKE) -C gz-0.5.7 gz.cmxa libmlgz.a

gz-0.5.7/gz.cma:
	$(MAKE) -C gz-0.5.7 gz.cma

grappa/grappa.cmxa: grappa/grappa.cmx grappa/libcamlgrappa.a \
	$(wildcard grappa/*.c) $(wildcard grappa/*.h)
	$(MAKE) -C grappa grappa.cmxa

grappa/grappa.cma: grappa/grappa.cmo grappa/libcamlgrappa.a \
	$(wildcard grappa/*.c) $(wildcard grappa/*.h)
	$(MAKE) -C grappa grappa.cma

grappa/libcamlgrappa.a: grappa/*.c grappa/*.h
	$(MAKE) -C grappa libcamlgrappa.a

graphps/graphps.cmx: graphps/graphps.mli graphps/graphps.ml
	$(MAKE) -C graphps graphps.cmx

graphps/graphps.cmo: graphps/graphps.mli graphps/graphps.ml
	$(MAKE) -C graphps graphps.cmo

grappa/%.o : grappa/%.c
	$(MAKE) -C grappa $@

# run as "make target DEBUG=-g" to compile a debug executable
DEBUG = -g

# Useful groups of components
LANGUAGE = intSpec.cmo alphSpec.cmo wordSpec.cmo specIndex.cmo characSpec.cmo \
	hashedFuncs.cmo splitting.cmo data.cmo poyParser.cmo

PARALLEL = methods.cmo 

CHROM_OBJS = grappa/grappa.cma utl.cmo chromPam.cmo staMat.cmo \
	utlGrappa.cmo incList.cmo sufNode.cmo sufTree.cmo subseq.cmo \
	seed.cmo block.cmo genAli.cmo aliMap.cmo chromAli.cmo chrom.cmo chromCS.cmo 

GENOME_OBJS = genomeAli.cmo genome.cmo genomeCS.cmo

BREAKINV_OBJS = breakinvAli.cmo breakinv.cmo breakinvCS.cmo

ANNCHROM_OBJS = annchromAli.cmo annchrom.cmo annchromCS.cmo

CHARACTER = char_add.cmo char_nonadd.cmo \
	sankCS.cmo seqCS.cmo $(CHROM_OBJS) $(GENOME_OBJS) $(BREAKINV_OBJS) $(ANNCHROM_OBJS) \
	dynamicCS.cmo nodeSig.cmo node.cmo allDirNode.cmo edge.cmo \
	characterScripting.cmo  metric.cmo 

PARSER = nexus.cmo hennig.cmo hennigLexer.cmo hennigParser.cmo nexusLexer.cmo nexusParser.cmo parser.cmo $(LANGUAGE) 

ifeq ($(USEGRAPHICS), tk)
      TREEOUTPUT = asciiTree.cmo graphTree.cmo graphicTK.cmo graphicsPs.cmo
else 
ifeq ($(USEGRAPHICS), ocaml)
       TREEOUTPUT = asciiTree.cmo graphTree.cmo graphicsScreen.cmo graphicsPs.cmo	
else 
       TREEOUTPUT = asciiTree.cmo graphTree.cmo graphicsPs.cmo 
endif
endif

TREE = tree.cmo rtree.cmo hash_tbl.cmo gen_rtree.cmo \
	graphps/graphps.cmo $(TREEOUTPUT) ptree.cmo searchInformation.cmo \
	chartree.cmo sparceMatrix.cmo unionTree.cmo allDirChar.cmo sampler.cmo \
	queues.cmo tabus.cmo treeSearch.cmo impliedAlignment.cmo charTransform.cmo \
	mst.cmo build.cmo 

DISTANCE_LIBS = character.cmo memstack.o add.o nonaddCS8.cmo \
	nonaddCSc8.o nonaddCS16.cmo nonaddCSc16.o nonaddCS32.cmo nonaddCSc32.o addCS.cmo 

SEQUENCE = all_sets.cmo alphabet.cmo cost_matrix.cmo matrix.cmo \
	primes.cmo fingerPrint.cmo sequence.cmo zarr.o avl.o \
	ukk.checkp.o ukkCommon.o algn.o

# Some personal tests that can be useful for everyone 
CAMLP4PROCESSED = poyParser.ml poyExtension.ml poyCommand.ml 

GETRUSAGE :=
ifneq ($(USEWIN32), true)
	GETRUSAGE := getrusage.o
endif

BASE_OBJS :=  camlpdf-0.3/zlibstubs.o gz-0.5.7/gz.cma compileFlags.cmo sadmanlib.cma poyFile.cmo lz.cmo \
	memProfiler.cmo enum.cmo bitSet.cmo $(READLINE) sleep.o \
	timer.cmo $(GETRUSAGE) buildNumber.cmo version.cmo \
	$(INTERFACE) sexpr.cmo xml.cmo poyFormaters.cmo \
	fileStream.cmo sequences.cma $(CAMLPDFOBJ) array_ops.cmo $(PARSER) \
	distances.cma $(CHARACTER) methods.cmo trees.cma diagnosis.cmo \
	supports.cmo help.cmo helpIndex.cmo analyzer.cmo \
	commandLexer.cmo poyCommand.cmo $(XSLT_COMPONENTS) scripting.cmo \

MAIN_OBJS = $(BASE_OBJS) arguments.cmo compileFlags.cmo phylo.cmo main.cmo

PORTAL_OBJS = $(BASE_OBJS) compileFlags.cmo phylo.cmo portal.cmo

BASE_OBJS_OPT = $(patsubst %.cmo,%.cmx, $(patsubst %.cma,%.cmxa, $(BASE_OBJS)))

MAIN_OBJS_OPT = $(patsubst %.cmo,%.cmx, $(patsubst %.cma,%.cmxa, $(MAIN_OBJS)))

PORTAL_OBJS_OPT = $(patsubst %.cmo,%.cmx, $(patsubst %.cma,%.cmxa, $(PORTAL_OBJS)))

TEST_OBJS = $(BASE_OBJS) sadmanlib.cma test_scripts.cmo

TEST_OBJS_OPT = $(patsubst %.cmo,%.cmx, $(patsubst %.cma,%.cmxa, $(TEST_OBJS)))

SADMAN = sadmanOutput.cmo sadman.cmo

all_libs: sequences.cma distances.cma \
	trees.cma sadmanlib.cma sequences.cmxa distances.cmxa \
	trees.cmxa parsers.cmxa sadmanlib.cmxa

# If you keep a set of personal test programs and their make scripts,
# set them up in Makefile.local, don't add them on this Makefile directly. 
-include Makefile.local

clean::
	rm -f .depend* .cdepends *.annot *.cmi str.cmxs \
		camlpdf-0.3/*.cmo camlpdf-0.3/*.cmx camlpdf-0.3/*.cmi \
		camlpdf-0.3/*.cma camlpdf-0.3/*.cmxa \
		camlpdf-0.3/*.o camlpdf-0.3/*.a *.cmo *.cmx* *.o *.a *.so \
		mpoy_console poy_test mpoy poy *.cma nonaddCS8.ml nonaddCS16.ml \
		nonaddCS32.ml nonaddCSc8.c nonaddCSc16.c nonaddCSc32.c hennigParser.ml \
		hennigParser.mli hennigLexer.ml nexusParser.ml nexusParser.mli \
		nexusLexier.ml status.ml ocaml-str poy_server help.ml \
	$(LOCAL_CLEAN) 
	@for subs in $(SUBDIRS); do \
	  cd $$subs; \
	  $(MAKE) clean; \
	  cd ..; \
	done

distclean: clean
	rm -f Makefile buildNumber.ml commandLexer.ml compileFlags.ml config.h \
		config.log config.status graphps/Makefile graphps/graphps.o \
		grappa/Makefile help.ml help.txt manpoy.txt nexusLexer.ml poy.1 \
		buildNumber.mli compileFlags.mli
	$(MAKE) -C gz-0.5.7 distclean

tags: otags ctags 

otags: *.ml
	otags -o otags $(filter-out poyParser.ml, $(wildcard *.ml))

ctags: *.c
	ctags -o ctags *.c

# Runtime options
buildNumber.ml: $(filter-out help.ml, $(filter-out buildNumber.ml, $(wildcard *.ml))) *.c $(filter-out buildNumber.mli, $(wildcard *.mli)) grappa/*.ml grappa/*.mli graphps/*.mli graphps/*.ml grappa/*.c grappa/*.h gz-0.5.7/*.c gz-0.5.7/*.h gz-0.5.7/*.ml gz-0.5.7/*.mli
	echo "let build = \" " `$(MERCURIAL)` "\"" > buildNumber.ml
	$(OCAMLC) -c -i buildNumber.ml > buildNumber.mli

buildNumber.mli: buildNumber.ml

compileFlags.ml: ./config.log
	echo "(** automatically generated description of compile-time flags *)" \
	> $@
	echo >> $@
	echo "let cc = \"" `which gcc` `gcc --version` "\"" >> $@
	#echo "let ccopt = \"" $(CCOPT) "\"" >> $@
	echo "let ccopt = \"\"" >> $@
	echo "let ocamlc = \"" `which $(OCAMLC)` `$(OCAMLC) -version` "\"" \
	>> $@
	echo "let ocamlopt = \"" `which $(OCAMLOPT:-fno-PIC=)` `$(OCAMLOPT:-fno-PIC=) -version` \
	"\"" >> $@
	echo "let time = \"" `date -r` "\"" >> $@
	echo "let str_parallel = \"" `grep USEPARALLEL ./config.log` "\"" >> $@
	echo "let str_interface = \"" `grep USEINTERFACE ./config.log` "\"" >> $@
	echo "let str_graphics = \"" `grep USEGRAPHICS ./config.log` "\"" >> $@
	$(OCAMLC) -c -i compileFlags.ml > compileFlags.mli

compileFlags.mli: compileFlags.ml

distances.cma: sequences.cma $(DISTANCE_LIBS)
	$(OCAMLC) $(OCAML_INCLUDES) -custom -a -o $@ $(^:sequences.cma=) $(MKLIBOPT) $(CCOPT)

parsers.cma : $(PARSER)
	$(OCAMLC) $(OCAML_INCLUDES) -custom -a -o $@ $^ $(MKLIBOPT) $(CCOPT)

trees.cma : $(CHARACTER) $(TREE)
	$(OCAMLC) $(OCAML_INCLUDES) -custom -a -o $@ $(MKLIBOPT) $(CCOPT) $(TREE)

sequences.cma: $(SEQUENCE)
	$(OCAMLC) $(OCAML_INCLUDES) -custom -a -o $@ $(^:methods.cmo=) $(MKLIBOPT) $(CCOPT)

sadmanlib.cma: $(SADMAN)
	$(OCAMLC) -a -o $@ $^ $(CCOPT) $(MKLIBOPT)

status.ml: config.h $(wildcard status_*.ml)
ifeq ($(USEINTERFACE), ncurses)
	cp status_ncurses.ml status.ml
else 
ifeq ($(USEINTERFACE), readline)
	cp status_flat.ml status.ml
else 
ifeq ($(USEINTERFACE), flat)
	cp status_flat.ml status.ml
else 
ifeq ($(USEINTERFACE), gtk2)
	cp status_gtk2.ml status.ml
else 
ifeq ($(USEINTERFACE), cocoa)
	cp status_cocoa.ml status.ml
else 
ifeq ($(USEINTERFACE), html)
	cp status_html.ml status.ml
endif
endif
endif
endif
endif
endif

status.cmo: statusCommon.cmo status.cmi status.ml
status.cmx: statusCommon.cmx status.cmi status.ml

sequences.cmxa: $(SEQUENCE:.cmo=.cmx)
	$(OCAMLOPT) -a -o $@ $^ $(MKLIBOPT) $(CCOPT) $(PROFILE)

distances.cmxa: ${DISTANCE_LIBS:.cmo=.cmx}
	$(OCAMLOPT) -a -o $@ $^ $(MKLIBOPT) $(CCOPT) $(PROFILE)

parsers.cmxa : ${PARSER:.cmo=.cmx}
	$(OCAMLOPT) -a -o $@ $^ $(MKLIBOPT) $(CCOPT) $(PROFILE)

trees.cmxa : $(CHARACTER:.cmo=.cmx)  ${TREE:.cmo=.cmx}
	$(OCAMLOPT) $(OFLAGS) $(OCAML_INCLUDES) -a -o $@ $(MKLIBOPT) $(CCOPT) ${TREE:.cmo=.cmx} $(PROFILE)

sadmanlib.cmxa: $(SADMAN:.cmo=.cmx)
	$(OCAMLOPT) -a -o $@ $^ $(MKLIBOPT) $(CCOPT) $(PROFILE)

.PHONY: subdirs $(SUBDIRS) clean distclean driver doc 

# -d .. puts stuff in prev directory
# -dot outputs dependency graph as .dot
FOR_DOC_FILES = $(filter-out $(wildcard $(CAMLP4PROCESSED:.ml=.mli)), $(wildcard *.mli)) \
	$(filter-out $(CAMLP4PROCESSED), $(wildcard *.ml))

doc: all_libs
	ocamldoc.opt -v -latex -keep-code -d ../doc/ -sort -stars $(OCAML_INCLUDES) \
	-colorize-code $(FOR_DOC_FILES) || true

graph: all_libs
	ocamldoc -v -dot -d ../doc/dependencies.dot $(OCAML_INCLUDES) \
	$(FOR_DOC_FILES) || true

subdirs: $(SUBDIRS)

# All the libraries specialized for certain size in the character set.
# First we define the sed scripts that will replace the names with the
# approprate needs 
SED8 = sed "s/nonadd_/nonadd8_/g; s/NONADDSIZE/8/g"
SED16 = sed "s/nonadd_/nonadd16_/g; s/NONADDSIZE/16/g"
SED32 = sed "s/nonadd_/nonadd32_/g; s/NONADDSIZE/32/g"

nonaddCS8.ml: nonaddCS.ml
	$(SED8) nonaddCS.ml > $@

nonaddCS16.ml: nonaddCS.ml
	$(SED16) nonaddCS.ml > $@

nonaddCS32.ml: nonaddCS.ml
	$(SED32) nonaddCS.ml > $@

nonaddCSc8.c: nonaddCSc.c
	$(SED8) $< > $@

nonaddCSc8.o: nonaddCSc8.c
	$(OCAMLOPT) $(CCOPT) -ccopt -DCHARSIZE=8 -c -I $(INCLUDE) ${@:.o=.c} $(PROFILE)

nonaddCSc16.c: nonaddCSc.c
	$(SED16) $< > $@

nonaddCSc16.o: nonaddCSc16.c
	$(OCAMLOPT) $(CCOPT) -ccopt -DCHARSIZE=16 -c -I $(INCLUDE) ${@:.o=.c} $(PROFILE)

nonaddCSc32.c: nonaddCSc.c
	$(SED32) $< > $@

nonaddCSc32.o: nonaddCSc32.c
	$(OCAMLOPT) $(CCOPT) -ccopt -DCHARSIZE=32 -c -I $(INCLUDE) ${@:.o=.c} $(PROFILE)

add.o: memstack.o

poy.1: help.txt

# Help file gets made using OCaml script
help.txt: compileFlags.cmx sadmanOutput.cmx poyFile.cmx lz.cmx statusCommon.cmx \
	buildNumber.cmx gz-0.5.7/gz.cmxa fileStream.cmx buildNumber.cmx version.cmx \
	latex.ml ../doc/allcommands.tex
ifeq ($(USEPARALLEL), true)
	$(OCAMLOPT) $(OFLAGS:-unsafe=) $(OCAML_INCLUDES) $(CCOPT) -o latex_helper \
	-cclib "-L./gz-0.5.7 -lmlgz" -cclib \
	-L$(OCAMLMPI) mpi.cmxa unix.cmxa str.cmxa compileFlags.cmx \
	sadmanOutput.cmx poyFile.cmx lz.cmx gz-0.5.7/gz.cmxa statusCommon.cmx \
	fileStream.cmx buildNumber.cmx version.cmx latex.ml $(LIBS)
else 
	$(OCAMLOPT) $(OFLAGS:-unsafe=) $(OCAML_INCLUDES) $(CCOPT) -o latex_helper \
	unix.cmxa str.cmxa compileFlags.cmx -cclib "-L./gz-0.5.7 -lmlgz" \
	sadmanOutput.cmx poyFile.cmx lz.cmx gz-0.5.7/gz.cmxa statusCommon.cmx \
	fileStream.cmx buildNumber.cmx version.cmx latex.ml $(LIBS)
endif
ifeq ($(USEWIN32), true)
	./latex_helper.exe 
	rm latex_helper.exe
else
	./latex_helper 
	rm latex_helper
endif

help.ml: ocaml-str ../doc/commands.tex
	./ocaml-str

help.cmx: help.ml ocaml-str
	$(OCAMLOPT) $(OFLAGS:-unsafe=) $(OCAML_INCLUDES:-unsafe=) -c help.ml \
		$(PROFILE:-unsafe=) $(CCOPT:-unsafe)

help.cmo: help.ml ocaml-str
	./ocaml-str
	$(OCAMLC) $(OFLAGS:-unsafe=) $(OCAML_INCLUDES:-unsafe=) -c help.ml \
		$(CCOPT:-unsafe)

help.html: ../doc/commands.tex ocaml-str
	./ocaml-str -html
# Static loading to support OS X and Cygwin...
ocaml-str: help.txt helpRead.ml
	$(OCAMLC) str.cma helpRead.ml -o ocaml-str

# Poy Parser needs to be preprocessed and remove the unsafe option
commandLexer.ml: commandLexer.mll
	$(OCAMLLEX) commandLexer.mll
poyCommand.cmo: commandLexer.cmo poyCommand.ml
	ocamlc $(PREPROCESSOR:-unsafe=) $(OCAML_INCLUDES:-unsafe=) -c poyCommand.ml
poyCommand.cmx: commandLexer.cmx poyCommand.ml
	$(OCAMLOPT) $(PREPROCESSOR:-unsafe=) $(OFLAGS:-unsafe=) $(OCAML_INCLUDES:-unsafe=) $(CCOPT:-unsafe=) -c poyCommand.ml
poyParser.cma: poyParser.ml
	$(OCAMLC) $(PREPROCESSOR:-unsafe=) -I +camlp4 $(OCAML_INCLUDES:-unsafe=) -c $(DEBUG:-unsafe=) $<

sampler.cmo: tree.cmi timer.cmi statusCommon.cmo status.cmi sequence.cmi \
    sadmanOutput.cmi ptree.cmi nodeSig.cmo methods.cmo edge.cmi all_sets.cmi 
	$(OCAMLC) $(OCAML_INCLUDES) -c $(DEBUG) sampler.ml
sampler.cmx: tree.cmx timer.cmx statusCommon.cmx $(INTERFACE) sequence.cmx \
    sadmanOutput.cmx ptree.cmx nodeSig.cmx methods.cmx edge.cmx all_sets.cmx 
	$(OCAMLOPT) $(OFLAGS) $(OCAML_INCLUDES) $(CCOPT) -c sampler.ml
tabus.cmo: utl.cmi unionTree.cmo tree.cmi timer.cmi status.cmi \
    sparceMatrix.cmi searchInformation.cmo sadmanOutput.cmi ptree.cmi \
    nodeSig.cmo edge.cmi all_sets.cmi 
	$(OCAMLC) $(OCAML_INCLUDES) -c $(DEBUG) tabus.ml
tabus.cmx: utl.cmx unionTree.cmx tree.cmx timer.cmx $(INTERFACE) \
    sparceMatrix.cmx searchInformation.cmx sadmanOutput.cmx ptree.cmx \
    nodeSig.cmx edge.cmx all_sets.cmx 
	$(OCAMLOPT) $(OFLAGS) $(OCAML_INCLUDES) $(CCOPT) -c tabus.ml

# Generics for all the builds

.SUFFIXES: .ml .mli .cmo .cmx .cmi .c .o

ultrametric.cmo: status.cmi ultrametric.cmi ultrametric.ml
	ocamlfind ocamlc -v -g ultrametric.ml -package ocamlgraph -linkpkg
ultrametric.cmx: $(INTERFACE) ultrametric.cmi ultrametric.ml
	ocamlfind ocamlopt -v ultrametric.ml -package ocamlgraph -linkpkg

hennigParser.ml: poyExtension.cmo hennigParser.mly
	$(OCAMLYACC) hennigParser.mly

hennigParser.mli: hennigParser.ml

hennigLexer.ml: hennigLexer.mll
	$(OCAMLLEX) hennigLexer.mll

nexusLexer.ml: nexusLexer.mll
	$(OCAMLLEX) nexusLexer.mll

nexusParser.cmi: poyExtension.cmo nexus.cmo nexusParser.mli
	$(OCAMLC)  $(OCAML_INCLUDES) -c $(DEBUG) nexusParser.mli

nexusParser.ml: nexusParser.mly
	$(OCAMLYACC) nexusParser.mly

nexusParser.mli: nexusParser.ml

%.cmo: %.ml poyExtension.cmo
	$(OCAMLC) $(OPTIONSPREPROCESSOR) $(OCAML_INCLUDES) -c $(DEBUG) $<

%.cmx: %.ml poyExtension.cmo
	$(OCAMLOPT) $(OPTIONSPREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(CCOPT) -c $< $(PROFILE)

%.cmxs: %.cmx
	$(OCAMLOPT) -shared -o $@ $<

%.cmi: %.mli poyExtension.cmo
	$(OCAMLC) $(OPTIONSPREPROCESSOR) -I +camlp4 $(OCAML_INCLUDES) $(DEBUG) $<

.m.o:
	$(CC) -I `$(OCAMLC) -where` -c -framework Cocoa $< 

%.o: %.c config.h
	$(OCAMLOPT) -ccopt "$(DEFOPTS)" $(CCOPT) -ccopt "-o $@" -c -I $(INCLUDE) $< $(PROFILE)

.cdepends: $(wildcard *.c) camlpdf-0.3/zlibstubs.c nonaddCSc8.c nonaddCSc16.c nonaddCSc32.c
ifneq ($(USEWIN32), true)
	$(OCAMLOPT) $(CCOPT) -ccopt "-I grappa" -ccopt -MM grappa/*.c *.c > .cdepends
endif

mpoy: $(MAIN_OBJS)
ifeq ($(USEPARALLEL), true)
	$(OCAMLC) -custom $(OCAML_INCLUDES) -cc mpicc -cclib -L$(OCAMLMPI) \
		$(OCAMLMPI)/mpi.cma -cclib -lmlgz \
		-cclib -lcamlgrappa $(CCOPT) $(DEBUG) -ccopt -L./ -o mpoy \
		$(GRAPHICS) dynlink.cma camlp4fulllib.cma unix.cma str.cma \
		bigarray.cma $^ $(LIBS)  
else
		$(OCAMLC) -custom $(OCAML_INCLUDES) -cclib -L$(OCAMLMPI) \
		-cclib -lmlgz -cclib -lcamlgrappa $(CCOPT) $(DEBUG) -ccopt -L./ -o mpoy \
		$(GRAPHICS) dynlink.cma camlp4fulllib.cma unix.cma str.cma \
		bigarray.cma $^ $(LIBS) 
endif


poy: $(MAIN_OBJS_OPT)
ifeq ($(USEPARALLEL), true)
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) \
		-cclib -L./gz-0.5.7 -cclib -L./grappa \
		-cclib -L./camlpdf-0.3 -cclib -L./graphps -cclib -L./ \
		-cclib -L$(OCAMLMPI) $(CCOPT) $(PROFILE) -cclib -lmlgz \
		-cclib -lcamlgrappa -o $@ mpi.cmxa $(GRAPHICS:.cma=.cmxa) \
		$(NATIVEDYNLINK) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa $^ $(LIBS) 
else
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) -verbose -ccopt -v \
		-cclib -L./gz-0.5.7 -cclib -L./grappa \
	-cclib  -L/usr/lib -cclib -L./camlpdf-0.3 -cclib -L./graphps -cclib -L./  \
	$(CCOPT) -cclib -lmlgz -cclib -lcamlgrappa $(PROFILE) -o poy \
	$(GRAPHICS:.cma=.cmxa) $(NATIVEDYNLINK) camlp4fulllib.cmxa unix.cmxa str.cmxa \
	bigarray.cmxa $^ $(LIBS) 
endif

poy_server: $(PORTAL_OBJS_OPT)
ifeq ($(USEPARALLEL), true)
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) \
		-cclib -L./gz-0.5.7 -cclib -L./grappa \
		-cclib -L./camlpdf-0.3 -cclib -L./graphps -cclib -L./ \
		-cclib -L$(OCAMLMPI) $(CCOPT) $(PROFILE) -cclib lmlgz \
		-cclib -lcamlgrappa -o $@ mpi.cmxa $(GRAPHICS:.cma=.cmxa) \
		$(NATIVEDYNLINK) camlp4fulllib.cmxa unix.cmxa str.cmxa bigarray.cmxa $^ $(LIBS) 
else
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) -verbose -ccopt -v \
		-cclib -L./gz-0.5.7 -cclib -L./grappa \
		-cclib  -L/usr/lib -cclib -L./camlpdf-0.3 -cclib -L./graphps -cclib -L./  \
		$(CCOPT) -cclib -lmlgz -cclib -lcamlgrappa $(PROFILE) -o $@ \
		$(GRAPHICS:.cma=.cmxa) $(NATIVEDYNLINK) camlp4fulllib.cmxa unix.cmxa str.cmxa \
		bigarray.cmxa $^ $(LIBS) 
endif

poy_test: $(TEST_OBJS_OPT)
	$(OCAMLOPT) $(PREPROCESSOR) $(OFLAGS) $(OCAML_INCLUDES) $(EXTRAS) -verbose -ccopt -v \
		-cclib -L./gz-0.5.7 -cclib -L./grappa \
		-cclib  -L/usr/lib -cclib -L./camlpdf-0.3 -cclib -L./graphps -cclib -L./  \
		$(CCOPT) -cclib -lmlgz -cclib -lcamlgrappa $(PROFILE) -o poy_test \
		$(GRAPHICS:.cma=.cmxa) $(NATIVEDYNLINK) camlp4fulllib.cmxa unix.cmxa str.cmxa \
		bigarray.cmxa $^ $(LIBS) 

# Interactive console to test various features
#mpoy_console: sequences.cma parsers.cma distances.cma trees.cma 
mpoy_console: $(BASE_OBJS) scripting.cmo phylo.cmo poyExtension.cmo
ifeq ($(USEPARALLEL), true)
	$(OCAMLTOP) $(PREPROCESSOR) $(OCAML_INCLUDES) -cc mpicc -cclib -L./ \
		-cclib -L./gz-0.5.7 -cclib -L./grappa \
		-I $(OCAMLMPI) -cclib -L./camlpdf-0.3 -cclib -L./graphps -custom -cclib \
		-L$(OCAMLMPI) $(CCOPT) $(PROFILE) -cclib -lmlgz \
		-cclib -lcamlgrappa -o $@ mpi.cma $(GRAPHICS) camlp4o.cma unix.cma str.cma \
		bigarray.cma $^ $(LIBS) 
else
	$(OCAMLTOP) $(CCOPT) $(PREPROCESSOR) $(OCAML_INCLUDES) -o $@ \
		-cclib -L./gz-0.5.7 -cclib -L./grappa -cclib -L./camlpdf-0.3 \
		-cclib -L./graphps -cclib -L./ -cclib -lmlgz -cclib -lcamlgrappa $(GRAPHICS) \
		unix.cma dynlink.cma camlp4o.cma str.cma bigarray.cma $^ $(LIBS) 
endif
ifeq (,$(findstring clean, $(MAKECMDGOALS)))
AUTOGENERATED= buildNumber.ml compileFlags.ml \
			   nonaddCS8.ml nonaddCS16.ml nonaddCS32.ml \
			   status.ml nexusParser.ml hennigParser.ml \
				   nexusLexer.ml hennigLexer.ml \
				   status.ml

NOPREPROCESSOR= tabus.ml sampler.ml

.dependbn: poyExtension.cmo buildNumber.ml buildNumber.mli
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.dependcamlp4:  poyExtension.cmo $(CAMLP4PROCESSED)
	$(OCAMLDEP) $(PREPROCESSOR) $(OCAML_INCLUDES: -unsafe=) $(CAMLP4PROCESSED) > $@

.depend0: poyExtension.cmo $(wildcard gz-0.5.7/*.ml*)
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@


.depend1: poyExtension.cmo compileFlags.mli compileFlags.ml sadmanOutput.mli \
	sadman.mli sadman.ml poyFile.mli poyFile.ml lz.mli lz.ml memProfiler.mli \
	memProfiler.ml enum.mli enum.ml bitSet.mli bitSet.ml timer.mli timer.ml \
	version.mli version.ml sadmanOutput.ml 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend2: poyExtension.cmo statusCommon.ml statusCommon.ml status.mli status.ml \
	xml.mli xml.ml poyFormaters.mli poyFormaters.ml fileStream.ml all_sets.mli \
	all_sets.ml alphabet.mli alphabet.ml fileStream.ml cost_matrix.mli \
	cost_matrix.ml matrix.mli matrix.ml primes.mli primes.ml fingerPrint.mli \
	fingerPrint.ml sequence.mli sequence.ml sexpr.mli sexpr.ml 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend3: poyExtension.cmo array_ops.mli array_ops.ml nexus.mli nexus.ml hennig.mli hennig.ml \
	hennigParser.mli hennigParser.ml hennigLexer.ml nexus.ml nexusParser.mli \
	nexusParser.ml nexusLexer.ml parser.mli parser.ml intSpec.mli intSpec.ml \
	alphSpec.mli alphSpec.ml wordSpec.mli wordSpec.ml specIndex.mli specIndex.ml \
	characSpec.mli characSpec.ml hashedFuncs.mli hashedFuncs.ml methods.mli \
	methods.ml  
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend4: poyExtension.cmo splitting.ml data.mli data.ml poyParser.mli character.mli character.ml \
	nonaddCS8.ml nonaddCS16.ml nonaddCS32.ml addCS.mli addCS.ml char_add.ml \
	char_nonadd.mli char_nonadd.ml sankCS.mli sankCS.ml seqCS.mli seqCS.ml  
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend4a: poyExtension.cmo $(wildcard grappa/*.ml*) 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@


.depend5: poyExtension.cmo utl.mli utl.ml chromPam.mli chromPam.ml staMat.mli staMat.ml \
	utlGrappa.mli utlGrappa.ml 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend6: poyExtension.cmo incList.mli incList.ml sufNode.mli sufNode.ml sufTree.mli sufTree.ml \
	subseq.mli subseq.ml seed.mli seed.ml block.mli block.ml genAli.mli genAli.ml \
	aliMap.mli aliMap.ml chromAli.mli chromAli.ml chrom.mli chrom.ml chromCS.mli \
	chromCS.ml genomeAli.mli genomeAli.ml genome.mli genome.ml genomeCS.mli \
	genomeCS.ml breakinvAli.mli breakinvAli.ml breakinv.mli breakinv.ml \
	breakinvCS.mli breakinvCS.ml annchromAli.mli annchromAli.ml annchrom.mli \
	annchrom.ml annchromCS.mli annchromCS.ml dynamicCS.mli dynamicCS.ml  
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend7: poyExtension.cmo nonaddCS8.ml nonaddCS32.ml nonaddCS16.ml nodeSig.mli nodeSig.ml node.mli \
	node.ml allDirNode.mli allDirNode.ml edge.mli edge.ml characterScripting.mli \
	characterScripting.ml metric.mli metric.ml  
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend8: poyExtension.cmo tree.mli tree.ml rtree.mli rtree.ml hash_tbl.mli hash_tbl.ml \
	gen_rtree.mli gen_rtree.ml 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend9: poyExtension.cmo $(wildcard graphps/*.ml*)
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend10: poyExtension.cmo asciiTree.mli asciiTree.ml graphTree.mli graphTree.ml graphicsPs.mli \
	graphicsPs.ml ptree.mli ptree.ml 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.dependpdf: $(filter-out %.c, $(CAMLPDFSOURCES))
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) $^ > $@

.depend11:  poyExtension.cmo searchInformation.mli searchInformation.ml \
	chartree.mli chartree.ml sparceMatrix.mli sparceMatrix.ml unionTree.mli \
	unionTree.ml allDirChar.mli allDirChar.ml dequeue.ml dequeue.mli \
	ncursesML.ml ncursesML.mli status.ml sampler.mli sampler.ml \
	queues.mli queues.ml tabus.mli tabus.ml treeSearch.mli treeSearch.ml \
	impliedAlignment.mli impliedAlignment.ml charTransform.mli \
	charTransform.ml mst.mli mst.ml build.mli build.ml
	$(OCAMLDEP) $(OCAML_INCLUDES: -unsafe=) $(NOPREPROCESSOR) > $@
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) >> $@

.depend12: poyExtension.cmo diagnosis.mli diagnosis.ml supports.mli supports.ml 
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

.depend13: poyExtension.cmo helpIndex.mli helpIndex.ml analyzer.mli analyzer.ml commandLexer.ml \
	commandLexer.ml poyCommand.mli xslt.mli xslt.ml scripting.mli scripting.ml \
	arguments.mli arguments.ml phylo.mli phylo.ml main.mli main.ml \
	test_scripts.ml test_scripts.mli portal.ml portal.mli
	$(OCAMLDEP) $(OCAML_INCLUDES) $(OPTIONSPREPROCESSOR) \
		$(filter-out poyExtension.cmo $(NOPREPROCESSOR) ,$^) > $@

PREPROCESSED=scripting.cmo seqCS.cmo sequence.cmo statusCommon.cmo timer.cmo
$(PREPROCESSED): config.h

include .dependbn
include .dependpdf
include .depend13
include .depend12
include .depend11
include .depend10
include .depend9
include .depend9
include .depend8
include .depend7
include .depend6
include .depend5
include .depend4a
include .depend4
include .depend3
include .depend2
include .depend1
include .depend0
include .dependcamlp4

ifneq ($(USEWIN32), true)
include .cdepends
endif
endif
# One additional dependency
$(patsubst %.cmo,%.cmx,$(PREPROCESSED)): config.h
poyParser.cmo: poyParser.ml
	$(OCAMLC) $(PREPROCESSOR:-unsafe=) $(OCAML_INCLUDES:-unsafe=) -c $<
poyParser.cmx: poyParser.ml
	$(OCAMLOPT) $(PREPROCESSOR:-unsafe=) $(OFLAGS:-unsafe=) \
		$(OCAML_INCLUDES:-unsafe=) $(CCOPT:-unsafe=) -c $<
poyExtension.cmo: poyExtension.ml
	$(OCAMLC) $(PREPROCESSOR:-unsafe=) $(OCAML_INCLUDES:-unsafe=) -c poyExtension.ml
poyExtension.cmx: poyExtension.ml
	$(OCAMLOPT) $(PREPROCESSOR:-unsafe=) $(OCAML_INCLUDES:-unsafe=) -c poyExtension.ml
